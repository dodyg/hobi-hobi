@model HobiHobi.Core.ViewModels.RiverTemplateViewModel
@{
    ViewBag.Title = Local.Manage.River.EditTemplate.Title;
    Layout = "~/Areas/Manage/Views/Shared/_Layout.cshtml";
}

<h2>@Local.Manage.River.EditTemplate.Title</h2>

<div class="tabbable">
    <ul class="nav nav-tabs">
        <li class="active"><a href="#wall_template" data-toggle="tab">Wall Template</a></li>
        <li><a href="#feed_template" data-toggle="tab">Feed Template</a></li>
        <li><a href="#css" data-toggle="tab">CSS</a></li>
        <li><a href="#javascript" data-toggle="tab">JavaScript</a></li>
        <li><a href="#coffeescript" data-toggle="tab">CoffeeScript</a></li>
    </ul>
    <div id="message"></div>
    <form method="post" action="@Request.RawUrl">
        <div class="tab-content">
             @Html.HiddenFor(m => m.RiverGuid)
                       
            <div class="tab-pane active" id="wall_template">
                @Html.AntiForgeryToken(HobiHobi.Core.SiteConstants.ANTI_FORGERY_SALT)
                <div class="control-group">
                    <label class="control-label" for="WallLiquidTemplate">Wall Template</label>
                    <div class="controls">
                        @Html.TextAreaFor(m => m.WallTemplate)
                    </div>
                </div>
            </div>
            <!-- end of wall_template -->
            <div class="tab-pane" id="feed_template">
                <div class="control-group">
                    <label class="control-label" for="FeedLiquidTemplate">Feed Template</label>
                    <div class="controls">
                        @Html.TextAreaFor(m => m.FeedTemplate)
                    </div>
                </div>
            </div>
            <!-- end of feed_template -->

            <div class="tab-pane" id="css">
                <div class="control-group">
                    <label class="control-label" for="LessCss">CSS (with Less)</label>
                    <div class="controls">
                        @Html.TextAreaFor(m => m.LessCss)
                    </div>
                </div>
            </div>
            <!-- end of css -->

            <div class="tab-pane" id="javascript">
                <div class="control-group">
                    <label class="control-label" for="JavaScript">JavaScript</label>
                    <div class="controls">
                        @Html.TextAreaFor(m => m.JavaScript)
                    </div>
                </div>
            </div>
            <!-- end of javascript -->

            <div class="tab-pane" id="coffeescript">
                <div class="control-group">
                    <label class="control-label" for="CoffeeScript">CoffeeScript</label>
                    <div class="controls">
                        @Html.TextAreaFor(m => m.CoffeeScript)
                    </div>
                </div>
            </div>
            <!-- end of javascript -->

            <div class="control-group">
                <div class="controls">
                    <button type="submit" id="save_submit" class="btn btn-primary">@Local.Manage.River.EditTemplate.BtnSubmit</button>
                </div>
            </div>
        </div>
<!-- end of tab-content -->
</form>
</div><!-- end of tabbable -->

@section HeadInline{
    @CodeMirror.Declaration(Html)
}

@section JsInline{
    <script type="text/javascript">
        var feed_template_shown = false;
        var css_shown = false;
        var javascript_shown = false;
        var coffeescript_shown = false;
        wall_editor = null, feed_editor = null, css_editor = null, js_editor = null, cs_editor = null;

        $(function () {
            @CodeMirror.Js("wall_editor", "WallTemplate", "htmlmixed")

            $('a[data-toggle="tab"]').on('shown', function (e) {
                var ref = $(e.target).attr('href');
                if (ref == '#feed_template' && !feed_template_shown) {
                    feed_template_shown = true;
                    @CodeMirror.Js("feed_editor", "FeedTemplate", "htmlmixed")
                } else if (ref == '#css' && !css_shown) {
                    css_shown = true;
                    @CodeMirror.Js("css_editor", "LessCss", "less")
                } else if (ref == '#javascript' && !javascript_shown) {
                    javascript_shown = true;
                    @CodeMirror.Js("js_editor", "JavaScript", "javascript")
                } else if (ref == '#coffeescript' && !coffeescript_shown) {
                    coffeescript_shown = true;
                    @CodeMirror.Js("cs_editor", "CoffeeScript", "coffeescript")
                }
            });
            
        });

        @CodeMirror.JsFunction()

        $('#save_submit').click(function () {
            if (wall_editor == null)
                var wall = $('#WallLiquidTemplate').text();
            else
                var wall = wall_editor.getValue();
            
            if (feed_editor == null)
                var feed = $('#FeedLiquidTemplate').text();
            else
                var feed = feed_editor.getValue();

            if (css_editor == null)
                var less = $('#LessCss').text();
            else
                var less = css_editor.getValue();

            if (js_editor == null)
                var js = $('#JavaScript').text();
            else
                var js = js_editor.getValue();

            if (cs_editor == null)
                var cs = $('#CoffeeScript').text();
            else
                var cs = cs_editor.getValue();

            var riverGuid = $('#RiverGuid').val();

            var doc = {
                RiverGuid: riverGuid,
                WallLiquidTemplate: wall,
                FeedLiquidTemplate: feed,
                LessCss: less,
                JavaScript: js,
                CoffeeScript: cs
            };

            var json = JSON.stringify(doc);

            $.ajax('/manage/river/edittemplate', {
                data: json,
                contentType: 'application/json; charset=utf-8',
                type: 'POST',
                dataType : 'json'
            })
                .done(function (payload) {
                    if (payload.StatusCode == 200)
                        inform("Update saved");
                    else {
                        var details = JSON.parse(payload.ErrorDetails);
                        var r = $('<ul></ul>');
                        _.each(details.Properties, function (m) {
                            switch (m.Key) {
                                case "WallTemplate": r.append("<li>Wall Template : " + m.Errors[0] + "</li>");
                                    break;
                                case "FeedTemplate": r.append("<li>Feed Template : " + m.Errors[0] + "</li>");
                                    break;
                                case "LessCss": r.append("<li>CSS : " + m.Errors[0] + "</li>");
                                    break;
                                case "JavaScript": r.append("<li>JavaScript : " + m.Errors[0] + "</li>");
                                    break;
                                case "CoffeeScript": r.append("<li>CoffeeScript : " + m.Errors[0] + "</li>");
                                    default : ;
                            }
                        });

                        alarm(r);
                    }
                })
                .fail(function (jqXHR, textStatus) {
                    alarm('fail ' + textStatus);
                });

            return false;
        });

        function inform(msg){
            $('#message').addClass('alert alert-success').html(msg).show().fadeOut(3000);
        }
        
        function alarm(msg) {
            $('#message').addClass('alert alert-error').html(msg).show().fadeOut(10000);
        }
    </script>
}